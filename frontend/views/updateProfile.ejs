<%- include ("meta.ejs") %>
<body>

    <%- include ("navbar.ejs") %>
    <%- include ("navUser.ejs") %>

    <div class="ctn-login">

        <div class="">
            
        </div>

        <p class="f-sanserif-regular mt-5">All job seekers need to update their profile 
            before applying for jobs. Otherwise, job applications 
            will not be available for the user.
        </p>
        <h1 class="f-sanserif-bold mt-5">UPDATE PROFILE</h1>

        <ul class="step-wizard-list mt-5">
            <li class="step-wizard-item current-item" data-step="1">
                <span class="progress-count">1</span>
                <span class="progress-label">Basic Information</span>
            </li>
            <li class="step-wizard-item" data-step="2">
                <span class="progress-count">2</span>
                <span class="progress-label">Work Experience</span>
            </li>
            <li class="step-wizard-item" data-step="3">
                <span class="progress-count">3</span>
                <span class="progress-label">Skills</span>
            </li>
            <li class="step-wizard-item" data-step="4">
                <span class="progress-count">4</span>
                <span class="progress-label">Upload Resume (Optional)</span>
            </li>
        </ul>

        <form action="" method="Post" class="ctn-form">

            <!-- Step 1: Basic Information -->
            <div class="form-step" data-step="1">
                <div class="input-group">
                    <input type="text" id="fullName" name="fullName" required>
                    <label for="fullName">Full Name <span class="required">*</span></label>
                </div>

                <div class="input-group date-picker">
                    <input type="date" id="dmBirth" name="dmBirth" required>
                    <label for="dmBirth">Date Of Birth <span class="required">*</span></label>
                </div>

                <div class="input-group">
                    <input type="text" id="about" name="About Me" required>
                    <label for="about me">About Me<span class="required">*</span></label>
                </div>

                <h1 class="f-sanserif-bold mt-5">CONTACT DETAILS</h1>

                <div class="input-group">
                    <input type="email" id="email2" name="email2" required>
                    <label for="email2">Email<span class="required">*</span></label>
                </div>

                <h1 class="f-sanserif-bold mt-5">PAYNOW ACCOUNT</h1>

                <p class="f-sanserif-regular mt-5">All payments will be made to this PayNow mobile no.</p>

                <div class="input-group">
                    <input type="text" id="paynowMobile" name="paynowMobile" required>
                    <label for="paynowMobile">Mobile No. <span class="required">*</span></label>
                </div>

                <button type="button" class="button-next next-section">Next</button>
            </div>

            <!-- Step 2: Work Experience -->
            <div class="form-step" data-step="2" style="display: none;">
                <div id="work-experience-container">
                    <h1 class="f-sanserif-bold mt-5">Work Experience 1</h1> <!-- Initial header -->
                    <div class="input-group">
                        <input type="text" id="jobTitle1" name="jobTitle[]" placeholder="Job Title">
                        <label for="jobTitle1">Job Title</label>
                    </div>
                    <div class="input-group">
                        <input type="text" id="companyName1" name="companyName[]" placeholder="Company Name">
                        <label for="companyName1">Company Name</label>
                    </div>
                    <div class="input-group">
                        <input type="text" id="jobDuration1" name="jobDuration[]" placeholder="Duration">
                        <label for="jobDuration1">Duration</label>
                    </div>
                </div>
                <div class="btn-option">
                    <button type="button" class="add-button" id="add-work-experience">+ Add Work Experience</button> <!-- Moved above -->
                    <button type="button" class="cancel-section" style="display: none;">Remove Work Experience</button>
                </div>
                <button type="button" class="button-content prev-section">Previous</button>
                <button type="button" class="button-next next-section">Next</button>
                
            </div>

            <!-- Step 3: Skills -->
            <div class="form-step" data-step="3" style="display: none;">
                <div id="skills-container">
                    <h1 class="f-sanserif-bold mt-5">Skills</h1>
                    <div class="input-group">
                        <input type="text" id="skill1" name="skills[]" placeholder="Skill">
                        <label for="skill1">Skill</label>
                    </div>
                </div>
                <div class="btn-option">
                    <button type="button" id="add-skill" class="add-button">+ Add Skill</button>
                    <button type="button" class="cancel-section" style="display: none;">Remove Skill</button>
                </div>

                <button type="button" class="button-content prev-section">Previous</button>
                <button type="button" class="button-next next-section">Next</button>
            </div>

            <!-- Step 4: Upload Resume -->
            <div class="form-step" data-step="4" style="display: none;">
                <h1 class="f-sanserif-bold mt-5">Upload Resume (Optional)</h1>
                <div class="input-group">
                    <input type="file" id="resume" name="resume">
                    <label for="resume">Upload Resume</label>
                </div>
                <button type="button" class="button-content prev-section">Previous</button>
                <button type="submit" class="button-createProfile">Create Profile</button>
    
            </div>

            <p class="f-sanserif-regular mt-5">By updating your profile, you ensure that all 
                information is accurate.
            </p>

        </form>
    </div>

    <%- include ("footer.ejs") %>

    <style>
        .button-content,
        .add-button,
        .cancel-section {
            display: block;
            margin-bottom: 10px; /* Adjust as needed */
        }
        .btn-option{
            display: flex;
            justify-content: space-around;
        }
        .input-group.date-picker input[type="date"] {
            padding-left: 60px; 
            font-size: 20px;

        }
    </style>

    <script>
        const steps = document.querySelectorAll('.step-wizard-item');
        const formSteps = document.querySelectorAll('.form-step');
        const nextBtns = document.querySelectorAll('.next-section');
        const prevBtns = document.querySelectorAll('.prev-section');
        const cancelBtns = document.querySelectorAll('.cancel-section');
        const workExperienceContainer = document.getElementById('work-experience-container');
        const addWorkExperienceBtn = document.getElementById('add-work-experience');
        const skillsContainer = document.getElementById('skills-container');
        const addSkillBtn = document.getElementById('add-skill');

        let currentStep = 1;
        let workExperienceCount = 1; // Track the number of work experience sections

        function updateStep(step) {
            formSteps.forEach((formStep, index) => {
                formStep.style.display = index === (step - 1) ? 'block' : 'none';
            });
            steps.forEach((stepItem, index) => {
                stepItem.classList.toggle('current-item', index === (step - 1));
            });
        }

// Update next button click event listeners to validate required fields
nextBtns.forEach(btn => {
    btn.addEventListener('click', () => {
        // Check if all required fields in the current step are filled
        const currentFormStep = document.querySelector(`.form-step[data-step="${currentStep}"]`);
        const inputs = currentFormStep.querySelectorAll('input[required]');
        let isValid = true;

        inputs.forEach(input => {
            if (!input.value.trim()) {
                isValid = false;
                input.classList.add('error'); 
            } else {
                input.classList.remove('error');
            }
        });

        if (isValid) {
            currentStep++;
            updateStep(currentStep);
        } else {
            // Optionally, you can display an error message or highlight the required fields
            console.log('Please fill in all required fields.');
            alert('Please fill in all required fields.');
        }
    });
});


        prevBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                currentStep--;
                updateStep(currentStep);
            });
        });

// Cancel Button Click Event
cancelBtns.forEach(btn => {
    btn.addEventListener('click', () => {
        if (currentStep === 2) { // Work Experience
            workExperienceContainer.lastElementChild.remove();
            workExperienceCount--;
            // Hide Remove Work Experience Button if no sections left
            if (workExperienceCount <= 1) {
                document.querySelector('.form-step[data-step="2"] .cancel-section').style.display = 'none';
            }
        } else if (currentStep === 3) { // Skills
            skillsContainer.lastElementChild.remove();
            // Hide Remove Skill Button if no sections left
            if (skillsContainer.childElementCount === 1) {
                document.querySelector('.form-step[data-step="3"] .cancel-section').style.display = 'none';
            }
        }
        updateStep(currentStep);
    });
});

// Add Work Experience Button Click Event
addWorkExperienceBtn.addEventListener('click', () => {
    workExperienceCount++;
    const newWorkExperience = document.createElement('div');
    newWorkExperience.innerHTML = `
        <h1 class="f-sanserif-bold mt-5">Work Experience ${workExperienceCount}</h1>
        <div class="input-group">
            <input type="text" name="jobTitle[]" placeholder="Job Title">
            <label for="jobTitle">Job Title</label>
        </div>
        <div class="input-group">
            <input type="text" name="companyName[]" placeholder="Company Name">
            <label for="companyName">Company Name</label>
        </div>
        <div class="input-group">
            <input type="text" name="jobDuration[]" placeholder="Duration">
            <label for="jobDuration">Duration</label>
        </div>
    `;
    workExperienceContainer.appendChild(newWorkExperience);

    // Show Remove Work Experience Button
    if (workExperienceCount > 1) {
        document.querySelector('.form-step[data-step="2"] .cancel-section').style.display = 'block';
    }
});

// Add Skill Button Click Event
addSkillBtn.addEventListener('click', () => {
    const newSkill = document.createElement('div');
    newSkill.classList.add('input-group');
    newSkill.innerHTML = `
        <input type="text" name="skills[]" placeholder="Skill">
        <label for="skill">Skill</label>
    `;
    skillsContainer.appendChild(newSkill);

    // Show Remove Skill Button
    document.querySelector('.form-step[data-step="3"] .cancel-section').style.display = 'block';
});

    // Include the userId in the userData object
    const userId = "<%= userId %>"; 
    async function populateData() {
    try {
        const response = await fetch('/api/populateData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId: userId }) // Send only userId
        });
        const result = await response.json();
        console.log("Result", result);

        // Directly access properties from the result object
        if (result.users) {
            console.log("Username:", result.users.username);
            console.log("Email:", result.users.email);
            document.getElementById('fullName').value = result.users.username || '';
            document.getElementById('email2').value = result.users.email || '';
        } else {
            console.log('User data not available.');
        }

        if (result.message) {
            alert(result.message);
        } else if (result.error) {
            alert(result.error);
        }
    } catch (e) {
        console.error("Error fetching profile data: ", e);
        alert("Error fetching profile data");
    }
}

populateData();


    // Define an object to store user data
    const userData = {
        userId: userId,
        fullName: '',
        dmBirth: '',
        email: '',
        paynowMobile: '',
        about: '', // Add about field
        workExperience: [],
        skills: [],
        resume: ''
    };

    // Function to update userData object with form values
    function updateUserData() {
        userData.fullName = document.getElementById('fullName').value;
        userData.dmBirth = document.getElementById('dmBirth').value;
        userData.email = document.getElementById('email2').value;
        userData.paynowMobile = document.getElementById('paynowMobile').value;
        userData.about = document.getElementById('about').value; // Add about field

        // Collect work experience data
        const jobTitles = document.getElementsByName('jobTitle[]');
        const companyNames = document.getElementsByName('companyName[]');
        const jobDurations = document.getElementsByName('jobDuration[]');
        userData.workExperience = [];
        for (let i = 0; i < jobTitles.length; i++) {
            userData.workExperience.push({
                jobTitle: jobTitles[i].value,
                companyName: companyNames[i].value,
                jobDuration: jobDurations[i].value
            });
        }

        // Collect skills data
        const skills = document.getElementsByName('skills[]');
        userData.skills = [];
        skills.forEach(skill => {
            userData.skills.push(skill.value);
        });

        // Get resume file if uploaded
        const resume = document.getElementById('resume').files[0];
        userData.resume = resume ? resume.name : 'Not uploaded';
    }

    // Submit form event listener
    const form = document.querySelector('form');
    form.addEventListener('submit', async function(event) {
        event.preventDefault(); // Prevent default form submission

        updateUserData();
        console.log(userData);    
        try {
            const response = await fetch('/api/updateProfile', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(userData)
            });
            const result = await response.json();
            console.log(result);
            if (result.message) {
                alert(result.message);
            } else if (result.error) {
                alert(result.error);
            }
        } catch (e) {
            console.error("Error updating profile: ", e);
            alert("Error updating profile");
        }
    });
    

        updateStep(currentStep);
    </script>

</body>
</html>